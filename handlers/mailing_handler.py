from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove, Message
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from bot import bot
from keyboards.start_keyboard import start_kb

from texts.start_text import get_start_text

from db import get_user_by_id, update_user_answer_mailing, update_user_tags_mailing

from states.subscribing_tags import SubscribeTag

from handlers.schedule_handler import send_new_questions

router = Router()


@router.callback_query(F.data == "get_mailing")
async def get_mailing(callback: CallbackQuery):
    await callback.message.answer(text="üëâ–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏",
                                  parse_mode="HTML",
                                  reply_markup=InlineKeyboardMarkup(
                                      inline_keyboard=[
                                          [InlineKeyboardButton(
                                              text=f"üí¨–†–∞—Å—Å—ã–ª–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–∞—Ö –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã",
                                              callback_data="mail_answer")],
                                          [InlineKeyboardButton(text=f"üîñ–†–∞—Å—Å—ã–ª–∫–∞ –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Ç–µ–≥–∞–º",
                                                                callback_data="mail_tags")],
                                          [InlineKeyboardButton(text=f"üè†–ù–∞ –≥–ª–∞–≤–Ω—É—é",
                                                                callback_data="main")]])
                                  )


@router.callback_query(F.data == "mail_answer")
async def page(callback: CallbackQuery):
    user = get_user_by_id(callback.from_user.id)
    if user[0][7] == 0:
        answer_text = "‚ùó–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–∞—Ö –Ω–∞ –í–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –µ–µ" \
                      " –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µüëáüèª"
        answer_kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=f"üîî–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É",
                                      callback_data="sub_answers")],
                [InlineKeyboardButton(text=f"üè†–ù–∞ –≥–ª–∞–≤–Ω—É—é",
                                      callback_data="main")]])
    else:
        answer_text = "‚úÖ–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–∞—Ö –Ω–∞ –í–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã." \
                      " –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –µ–µ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µüëáüèª"
        answer_kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=f"‚ùå–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏",
                                      callback_data="cancel_answers")],
                [InlineKeyboardButton(text=f"üè†–ù–∞ –≥–ª–∞–≤–Ω—É—é",
                                      callback_data="main")]])
    await callback.message.answer(text=answer_text,
                                  parse_mode="HTML",
                                  reply_markup=answer_kb)


@router.callback_query(F.data == "sub_answers")
async def page(callback: CallbackQuery):
    user = get_user_by_id(callback.from_user.id)
    update_user_answer_mailing(user[0][1], 1)
    await callback.message.answer(text="‚úÖ–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É!",
                                  parse_mode="HTML",
                                  reply_markup=InlineKeyboardMarkup(
                                      inline_keyboard=[
                                          [InlineKeyboardButton(text=f"üè†–ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="main")]]))


@router.callback_query(F.data == "cancel_answers")
async def page(callback: CallbackQuery):
    user = get_user_by_id(callback.from_user.id)
    update_user_answer_mailing(user[0][1], 0)
    await callback.message.answer(text="‚úÖ–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏!",
                                  parse_mode="HTML",
                                  reply_markup=InlineKeyboardMarkup(
                                      inline_keyboard=[
                                          [InlineKeyboardButton(text=f"üè†–ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="main")]]))


@router.callback_query(F.data == "mail_tags")
async def page(callback: CallbackQuery):
    user = get_user_by_id(callback.from_user.id)
    if user[0][8] == "" or user[0][8] is None:
        answer_text = "‚ùó–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ç–µ–≥–∞–º." \
                      "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –µ–µ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µüëáüèª"
        answer_kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=f"üîî–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É",
                                      callback_data="sub_tags")],
                [InlineKeyboardButton(text=f"üè†–ù–∞ –≥–ª–∞–≤–Ω—É—é",
                                      callback_data="main")]])
    else:
        answer_text = "‚úÖ–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö –ø–æ –¥–∞–Ω–Ω—ã–º —Ç–µ–≥–∞–º: " \
                      f"{user[0][8]}." \
                      " –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –µ–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µüëáüèª"
        answer_kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=f"‚ùå–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏",
                                      callback_data="cancel_tags")],
                [InlineKeyboardButton(text=f"‚úèÔ∏è–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ—é —Ä–∞—Å—Å—ã–ª–∫—É",
                                      callback_data="sub_tags")],
                [InlineKeyboardButton(text=f"üè†–ù–∞ –≥–ª–∞–≤–Ω—É—é",
                                      callback_data="main")]])
    await callback.message.answer(text=answer_text,
                                  parse_mode="HTML",
                                  reply_markup=answer_kb)


@router.callback_query(F.data == "sub_tags")
async def page(callback: CallbackQuery, state: FSMContext):
    await state.update_data(user_id=callback.from_user.id)
    await callback.message.answer(
        text="üè∑Ô∏è–ù–∞–ø–∏—à–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ–≥–æ–≤",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(SubscribeTag.tags)


@router.message(SubscribeTag.tags)
async def page(message: Message, state: FSMContext):
    await state.update_data(tags=message.text)
    await message.answer(
        text="‚è∞–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ 1 –Ω–µ–¥ –ò–õ–ò 5 –¥–Ω –ò–õ–ò 12 —á –ò–õ–ò 30 –º–∏–Ω –ò–õ–ò 45 —Å–µ–∫",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(SubscribeTag.time)


@router.message(SubscribeTag.time)
async def page(message: Message, state: FSMContext, apscheduler: AsyncIOScheduler):
    await state.update_data(time=message.text)
    user_data = await state.get_data()
    if user_data["time"].split(" ")[1] == "–Ω–µ–¥":
        apscheduler.add_job(send_new_questions, trigger="interval", week=int(user_data["time"].split(" ")[0]),
                            kwargs={"user_id": user_data["user_id"], "bot": bot})
        answer_text = "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É!"
        update_user_tags_mailing(user_data["user_id"], user_data["time"], user_data["tags"])
    elif user_data["time"].split(" ")[1] == "–¥–Ω":
        apscheduler.add_job(send_new_questions, trigger="interval", day=int(user_data["time"].split(" ")[0]),
                            kwargs={"user_id": user_data["user_id"], "bot": bot})
        answer_text = "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É!"
        update_user_tags_mailing(user_data["user_id"], user_data["time"], user_data["tags"])
    elif user_data["time"].split(" ")[1] == "—á":
        apscheduler.add_job(send_new_questions, trigger="interval", hours=int(user_data["time"].split(" ")[0]),
                            kwargs={"user_id": user_data["user_id"], "bot": bot})
        answer_text = "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É!"
        update_user_tags_mailing(user_data["user_id"], user_data["time"], user_data["tags"])
    elif user_data["time"].split(" ")[1] == "–º–∏–Ω":
        apscheduler.add_job(send_new_questions, trigger="interval", minutes=int(user_data["time"].split(" ")[0]),
                            kwargs={"user_id": user_data["user_id"], "bot": bot})
        answer_text = "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É!"
        update_user_tags_mailing(user_data["user_id"], user_data["time"], user_data["tags"])
    elif user_data["time"].split(" ")[1] == "—Å–µ–∫":
        apscheduler.add_job(send_new_questions, trigger="interval", seconds=int(user_data["time"].split(" ")[0]),
                            kwargs={"user_id": user_data["user_id"], "bot": bot})
        answer_text = "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É!"
        update_user_tags_mailing(user_data["user_id"], user_data["time"], user_data["tags"])
    else:
        answer_text = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞!"
    answer_kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=f"üè†–ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="main")]])
    await message.answer(
        text=answer_text,
        reply_markup=answer_kb
    )


@router.callback_query(F.data == "cancel_tags")
async def page(callback: CallbackQuery, apscheduler: AsyncIOScheduler):
    user = get_user_by_id(callback.from_user.id)
    update_user_tags_mailing(user[0][1], "", "")
    for job in apscheduler.get_jobs():
            job.remove()
    await callback.message.answer(text="‚úÖ–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏!",
                                  parse_mode="HTML",
                                  reply_markup=InlineKeyboardMarkup(
                                      inline_keyboard=[
                                          [InlineKeyboardButton(text=f"üè†–ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="main")]]))


@router.callback_query(F.data == "main")
async def back_to_main(callback: CallbackQuery):
    await callback.message.answer(
        get_start_text(),
        reply_markup=start_kb()
    )
