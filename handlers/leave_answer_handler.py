from datetime import datetime

import g4f
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from states.leaving_answer import LeaveAnswer

from keyboards.start_keyboard import start_kb

from texts.start_text import get_start_text

from db import insert_answer, get_question_by_id

router = Router()


@router.callback_query(F.data.startswith('answer_'))
async def leave_answer(callback: CallbackQuery):
    await callback.message.answer(
        text="ü§î–•–æ—Ç–∏—Ç–µ –ª–∏ –í—ã –Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç–≤–µ—Ç —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –∏–ª–∏ —Å –ø–æ–º–æ—â—å—é –¢–∏–º–∞?",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text=f"üôã‚ÄçÔ∏è–°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ",
                                                   callback_data=f"a_self_{callback.data.split('_')[1]}")],
                             [InlineKeyboardButton(text=f"ü§ñ–° –ø–æ–º–æ—â—å—é –¢–∏–º–∞",
                                                   callback_data=f"a_tim_{callback.data.split('_')[1]}")]])
    )


@router.callback_query(F.data.startswith('a_tim_'))
async def leave_answer(callback: CallbackQuery, state: FSMContext):
    await state.update_data(user_id=callback.from_user.id)
    await state.update_data(question_id=callback.data.split('_')[2])
    try:
        user_data = await state.get_data()
        question = get_question_by_id(user_data["question_id"])
        text = "–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã - —Ç–∏–º-–ª–∏–¥ it-–æ—Ç–¥–µ–ª–∞ –º–∞—à–∏–Ω–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞." \
               " –¢–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –¥–∞–Ω–Ω—ã–π —Ç–µ–±–µ –≤–æ–ø—Ä–æ—Å –æ—Ç –º–ª–∞–¥—à–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏. " \
               " –í –æ—Ç–≤–µ—Ç–µ –æ—Å—Ç–∞–≤—å —Ç–æ–ª—å–∫–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–±–æ–π –æ—Ç–≤–µ—Ç –±–µ–∑ –ª–∏—à–Ω–∏—Ö –Ω–∞–¥–ø–∏—Å–µ–π, —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç." \
               " –¢–≤–æ–π –æ—Ç–≤–µ—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å –ª–∏–º–∏—Ç –≤ 1500 –∑–Ω–∞–∫–æ–≤." \
               " –í–æ–ø—Ä–æ—Å –∫ —Ç–µ–±–µ: " + question[0][4]
        await state.update_data(text=text)
        messages = [{"role": "user", "content": text}]
        responce = g4f.ChatCompletion.create(
            model=g4f.models.gpt_35_turbo,
            messages=messages
        )
        await state.update_data(cur_answer=responce)
        await callback.message.answer(
            text=f"ü§ñ–¢–∏–º –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –í–∞–º –æ—Ç–≤–µ—Ç–∏—Ç—å —Ç–∞–∫: \n"
                 f"{responce}\n"
                 f"‚ùì–û–¥–æ–±—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç?",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text=f"‚úÖ–û–¥–æ–±—Ä–∏—Ç—å",
                                                       callback_data="ok_ai_ans")],
                                 [InlineKeyboardButton(text=f"üè†–û—Ç–º–µ–Ω–∏—Ç—å –∏ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –≥–ª–∞–≤–Ω—É—é",
                                                       callback_data="main")]])
        )
    except:
        await callback.message.answer(
            text=f"ü§ñ–¢–∏–º, –∫ —Å–æ–∂–ª–µ–Ω–∏—é, —É—Å—Ç–∞–ª, –∏ –ø–æ–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Åüòî",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text=f"üè†–ù–∞ –≥–ª–∞–≤–Ω—É—é",
                                                       callback_data="main")]])
        )


@router.callback_query(F.data.startswith('ok_ai_ans'))
async def leave_answer(callback: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    insert_answer(question_id=user_data["question_id"], user_id=user_data['user_id'], onModeration=1,
                  date_posted=datetime.now().strftime("%d.%m.%Y %H:%M"),
                  answer_text=user_data['cur_answer'], answer_photo_id=0, answer_video_id=0,
                  answer_audio_id=0, answer_document_id=0, answer_voice_id=0,
                  answer_video_note_id=0, answer_rating=0, isAI=1, answer_votes=0)
    await callback.message.answer(
        text="‚úÖ–í–∞—à –æ—Ç–≤–µ—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text=f"–ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="main")]])
    )
    await state.clear()


@router.callback_query(F.data.startswith('a_self_'))
async def leave_answer(callback: CallbackQuery, state: FSMContext):
    await state.update_data(user_id=callback.from_user.id)
    await state.update_data(question_id=callback.data.split('_')[2])
    await callback.message.answer(
        text="üì≤–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–≤–æ–µ–≥–æ –æ—Ç–≤–µ—Ç–∞, –ª–∏–±–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –≤–∏–¥–µ–æ, –∞—É–¥–∏–æ, –¥–æ–∫—É–º–µ–Ω—Ç,"
             " –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –≤–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(LeaveAnswer.answer)


@router.message(LeaveAnswer.answer)
async def leave_feedback(message: Message, state: FSMContext):
    user_data = await state.get_data()
    if message.text is not None:
        insert_answer(question_id=user_data["question_id"], user_id=user_data['user_id'], onModeration=1,
                      date_posted=datetime.now().strftime("%d.%m.%Y %H:%M"),
                      answer_text=message.text, answer_photo_id=0, answer_video_id=0,
                      answer_audio_id=0, answer_document_id=0, answer_voice_id=0,
                      answer_video_note_id=0, answer_rating=0, isAI=0, answer_votes=0)
    elif message.photo is not None:
        insert_answer(question_id=user_data["question_id"], user_id=user_data['user_id'], onModeration=1,
                      date_posted=datetime.now().strftime("%d.%m.%Y %H:%M"),
                      answer_text="", answer_photo_id=message.photo[-1].file_id, answer_video_id=0,
                      answer_audio_id=0, answer_document_id=0, answer_voice_id=0,
                      answer_video_note_id=0, answer_rating=0, isAI=0, answer_votes=0)
    elif message.video is not None:
        insert_answer(question_id=user_data["question_id"], user_id=user_data['user_id'], onModeration=1,
                      date_posted=datetime.now().strftime("%d.%m.%Y %H:%M"),
                      answer_text="", answer_photo_id=0, answer_video_id=message.video.file_id,
                      answer_audio_id=0, answer_document_id=0, answer_voice_id=0,
                      answer_video_note_id=0, answer_rating=0, isAI=0, answer_votes=0)
    elif message.audio is not None:
        insert_answer(question_id=user_data["question_id"], user_id=user_data['user_id'], onModeration=1,
                      date_posted=datetime.now().strftime("%d.%m.%Y %H:%M"),
                      answer_text="", answer_photo_id=0, answer_video_id=0,
                      answer_audio_id=message.audio.file_id, answer_document_id=0, answer_voice_id=0,
                      answer_video_note_id=0, answer_rating=0, isAI=0, answer_votes=0)
    elif message.document is not None:
        insert_answer(question_id=user_data["question_id"], user_id=user_data['user_id'], onModeration=1,
                      date_posted=datetime.now().strftime("%d.%m.%Y %H:%M"),
                      answer_text="", answer_photo_id=0, answer_video_id=0,
                      answer_audio_id=0, answer_document_id=message.document.file_id, answer_voice_id=0,
                      answer_video_note_id=0, answer_rating=0, isAI=0, answer_votes=0)
    elif message.voice is not None:
        insert_answer(question_id=user_data["question_id"], user_id=user_data['user_id'], onModeration=1,
                      date_posted=datetime.now().strftime("%d.%m.%Y %H:%M"),
                      answer_text="", answer_photo_id=0, answer_video_id=0,
                      answer_audio_id=0, answer_document_id=0, answer_voice_id=message.voice.file_id,
                      answer_video_note_id=0, answer_rating=0, isAI=0, answer_votes=0)
    elif message.video_note is not None:
        insert_answer(question_id=user_data["question_id"], user_id=user_data['user_id'], onModeration=1,
                      date_posted=datetime.now().strftime("%d.%m.%Y %H:%M"),
                      answer_text="", answer_photo_id=0, answer_video_id=0,
                      answer_audio_id=0, answer_document_id=0, answer_voice_id=0,
                      answer_video_note_id=message.video_note.file_id,
                      answer_rating=0, isAI=0, answer_votes=0)
    question = get_question_by_id(user_data["question_id"])
    await message.answer(
        text="‚úÖ–í–∞—à –æ—Ç–≤–µ—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text=f"–ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="main")]])
    )
    await state.clear()


@router.callback_query(F.data == "main")
async def back_to_main(callback: CallbackQuery):
    await callback.message.edit_text(
        get_start_text(),
        reply_markup=start_kb()
    )
